name: CI/CD Pipeline for API Gateway Service

on:
  pull_request:
    branches:
      - main
    paths:
      - "apps/backend/api-gateway/**"
  push:
    branches:
      - main
    paths:
      - "apps/backend/api-gateway/**"

defaults:
  run:
    working-directory: apps/backend/api-gateway

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "apps/backend/api-gateway"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Install dependencies without creating a lockfile
      - name: Install dependencies
        run: yarn install 

      - name: Run build
        run: yarn build

      - name: List build directory contents
        run: ls -la ./apps/backend/api-gateway/build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./apps/backend/api-gateway/build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./apps/backend/api-gateway/build 

      - name: List downloaded artifacts
        run: ls -la ./apps/backend/api-gateway/build

      - name: Prepare Deployment Directories
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            mkdir -p /home/ubuntu/apps/build
            mkdir -p /home/ubuntu/apps/build/configs

      - name: Copy files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "./apps/backend/api-gateway/build/*"
          target: "/home/ubuntu/apps/build"
          strip_components: 1

      - name: Create .env File
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "NODE_ENV=production" > /home/ubuntu/apps/build/configs/.env.production
            echo "PORT=${{secrets.API_GETWAY_PORT}}" >> /home/ubuntu/apps/build/configs/.env.production
            echo "MONGODB_URL=${{secrets.MONGODB_URL}}" >> /home/ubuntu/apps/build/configs/.env.production
            echo "COGNITO_APP_CIENTID=${{secrets.COGNITO_APP_CIENTID}}" >> /home/ubuntu/apps/build/configs/.env.production
            echo "COGNITO_APP_CIENTSECRET=${{secrets.COGNITO_APP_CIENTSECRET}}" >> /home/ubuntu/apps/build/configs/.env.production
            echo "COGNITO_APP_DOMAIN=${{secrets.COGNITO_APP_DOMAIN}}" >> /home/ubuntu/apps/build/configs/.env.production
            echo "REDIRECT_URI=${{secrets.REDIRECT_URI}}" >> /home/ubuntu/apps/build/configs/.env.production
            echo "USER_POOL_ID=${{secrets.USER_POOL_ID}}" >> /home/ubuntu/apps/build/configs/.env.production
            echo "AUTH_SERVICE_URL=${{secrets.AUTH_SERVICE_URL}}" >> /home/ubuntu/apps/build/configs/.env.production
            echo "USER_SERVICE_URL=${{secrets.USER_SERVICE_URL}}" >> /home/ubuntu/apps/build/configs/.env.production
            echo "PROPERTY_SERVICE_URL=${{secrets.PROPERTY_SERVICE_URL}}" >> /home/ubuntu/apps/build/configs/.env.production

      - name: Install Dependencies and Restart Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            source /home/ubuntu/.nvm/nvm.sh
            source /home/ubuntu/.profile

            cd /home/ubuntu/apps/build
            yarn install --production --skip-build

            # Debug: List files after installation
            ls -la 

            # Check if the PM2 process is running
            if pm2 show api-gateway > /dev/null; then
              echo "Application is running. Restarting..."
              pm2 restart api-gateway
            else
              echo "Application is not running. Starting..."
              pm2 start yarn --name api-gateway -- start
