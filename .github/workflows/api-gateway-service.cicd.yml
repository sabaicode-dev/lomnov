name: CI/CD Pipeline for API Gateway Service

on:
  pull_request:
    branches:
      - main
    paths:
      - "apps/backend/api-gateway/**"
  push:
    branches:
      - main
    paths:
      - "apps/backend/api-gateway/**"

defaults:
  run:
    working-directory: apps/backend/api-gateway

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures all branches and tags are fetched

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Use the version of Node.js that your project requires

      - name: Install dependencies
        run: yarn install --no-immutable

      - name: Run build
        run: yarn build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./apps/backend/api-gateway/build

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"

  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build
  #         path: ./apps/backend/api-gateway/build

  #     - name: Prepare Deployment Directories
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.SERVER_IP }}
  #         username: ${{ secrets.SERVER_USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: 22
  #         script: |
  #           mkdir -p /home/ubuntu/apps/api-gateway/build
  #           mkdir -p /home/ubuntu/apps/api-gateway/build/configs

  #     - name: Copy files to EC2
  #       uses: appleboy/scp-action@master
  #       with:
  #         host: ${{ secrets.SERVER_IP }}
  #         username: ${{ secrets.SERVER_USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: 22
  #         source: "./apps/backend/api-gateway/build/*"
  #         target: "/home/ubuntu/apps/api-gateway/build"
  #         strip_components: 4

  #     - name: Create .env File
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.SERVER_IP }}
  #         username: ${{ secrets.SERVER_USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: 22
  #         script: |
  #           echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> /home/ubuntu/apps/api-gateway/build/configs/.env.production
  #           echo "PORT=${{ secrets.API_GATEWAY_SERVICE_PORT }}" >> /home/ubuntu/apps/api-gateway/build/configs/.env.production
  #           echo "CLIENT_URL=${{ secrets.CLIENT_URL }}" >> /home/ubuntu/apps/api-gateway/build/configs/.env.production
  #           echo "AUTH_SERVICE_URL=${{ secrets.AUTH_SERVICE_URL }}" >> /home/ubuntu/apps/api-gateway/build/configs/.env.production
  #           echo "USER_SERVICE_URL=${{ secrets.USER_SERVICE_URL }}" >> /home/ubuntu/apps/api-gateway/build/configs/.env.production
  #           echo "PROPERTY_SERVICE_URL=${{ secrets.PROPERTY_SERVICE_URL }}" >> /home/ubuntu/apps/api-gateway/build/configs/.env.production
  #           echo "AWS_COGNITO_USER_POOL_ID=${{ secrets.AWS_COGNITO_USER_POOL_ID }}" >> /home/ubuntu/apps/api-gateway/build/configs/.env.production
  #           echo "AWS_COGNITO_CLIENT_ID=${{ secrets.AWS_COGNITO_CLIENT_ID }}" >> /home/ubuntu/apps/api-gateway/build/configs/.env.production

  #     - name: Install Dependencies and Restart PM2
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.SERVER_IP }}
  #         username: ${{ secrets.SERVER_USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: 22
  #         script: |
  #           # Load the full user environment for non-interactive shells
  #           source /home/ubuntu/.nvm/nvm.sh
  #           source /home/ubuntu/.profile

  #           cd /home/ubuntu/apps/api-gateway/build
  #           yarn install --production

  #           # Check if the PM2 process is running
  #           if pm2 show api-gateway-service > /dev/null; then
  #             echo "Application is running. Restarting..."
  #             yarn restart
  #           else
  #             echo "Application is not running. Starting..."
  #             yarn start:pm2-production
  #           fi
